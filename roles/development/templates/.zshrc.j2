export ZSH="{{ home_directory }}/.oh-my-zsh"
ZSH_THEME="robbyrussell"
DISABLE_UPDATE_PROMPT="true"
plugins=(git)
source $ZSH/oh-my-zsh.sh

# User configuration

# setting for pip install --user
export PATH="{{ home_directory }}/.local/bin:$PATH"

# eternal history
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Disable bash history substitution, because it corrupts vscode debugger
set +H
unsetopt HIST_VERIFY

# docker aliases
alias d="docker"
alias dps="docker ps"
alias dck=docker-compose
alias s=sudo
alias e='exa --long --all'
alias soft='cd ~/Soft'
alias proj='cd ~/Projects'
alias ans='. ~/venvs/ansible/bin/activate'
alias dev='cd ~/Projects/bebop-devstack/devstack'
alias td="todoist_linux_amd64 add"
alias p="ipython"
alias pre="prettier --single-quote --write"
alias sol="cd ~/Projects/solutions-devstack/ && vagrant ssh -- -t 'cd devstack/devstack/; /bin/bash'"
alias jol="cd ~/Projects/solutions-juniper-devstack/ && vagrant ssh -- -t 'cd devstack/devstack/; /bin/bash'"

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
export PATH=$PATH:/usr/local/go/bin

echo "Remote workstation."

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

eval "$(pyenv virtualenv-init -)"
# eval "$(jira --completion-script-bash)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Kubernetes setup
source <(kubectl completion zsh)
alias k=kubectl
complete -F __start_kubectl k

# Tutor completions

#compdef tutor

_tutor_completion() {
    local -a completions
    local -a completions_with_descriptions
    local -a response
    (( ! $+commands[tutor] )) && return 1

    response=("${(@f)$(env COMP_WORDS="${words[*]}" COMP_CWORD=$((CURRENT-1)) _TUTOR_COMPLETE=zsh_complete tutor)}")

    for type key descr in ${response}; do
        if [[ "$type" == "plain" ]]; then
            if [[ "$descr" == "_" ]]; then
                completions+=("$key")
            else
                completions_with_descriptions+=("$key":"$descr")
            fi
        elif [[ "$type" == "dir" ]]; then
            _path_files -/
        elif [[ "$type" == "file" ]]; then
            _path_files -f
        fi
    done

    if [ -n "$completions_with_descriptions" ]; then
        _describe -V unsorted completions_with_descriptions -U
    fi

    if [ -n "$completions" ]; then
        compadd -U -V unsorted -a completions
    fi
}

compdef _tutor_completion tutor;

neofetch
