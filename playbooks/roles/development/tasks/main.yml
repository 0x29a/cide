- name: Create "Soft" directory.
  ansible.builtin.file:
    path: "{{ software_directory }}"
    state: directory

- name: Create "Projects" directory.
  ansible.builtin.file:
    path: "{{ projects_directory }}"
    state: directory

- name: Copy .pypirc.
  ansible.builtin.template:
    src: .pypirc.j2
    dest: "{{ home_directory }}/.pypirc"

- name: Check if pyenv exists.
  ansible.builtin.stat:
    path: "{{ home_directory }}/.pyenv"
  register: stat_pyenv_result

- name: Install pyenv.
  ansible.builtin.shell: git clone https://github.com/pyenv/pyenv.git ~/.pyenv
  when: not stat_pyenv_result.stat.exists

- name: Check if pyenv-virtualenv exists.
  ansible.builtin.stat:
    path: "{{ home_directory }}/.pyenv/plugins/pyenv-virtualenv"
  register: stat_pyenv_virtualenv_result

- name: Install pyenv-virtualenv.
  ansible.builtin.shell: git clone https://github.com/pyenv/pyenv-virtualenv.git {{ home_directory }}/.pyenv/plugins/pyenv-virtualenv
  when: not stat_pyenv_virtualenv_result.stat.exists

- name: Add HashiCorp key.
  become: true
  ansible.builtin.apt_key:
    url: https://apt.releases.hashicorp.com/gpg
    state: present

- name: Add HashiCorp repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release | lower }} main
    state: present

- name: Install HashiCorp tools.
  become: true
  ansible.builtin.apt:
    name:
      - vagrant
      - terraform
      - vault
    update_cache: true
    state: present

# TODO: Remove this block when it's proven that podman is working as expected.
- name: Add Docker key.
  become: true
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable
    state: present
  tags: docker

- name: Install Docker.
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    update_cache: true
    state: present
  tags: docker

- name: Enable podman.socket user service.
  ansible.builtin.shell: systemctl --user enable podman.socket

- name: Start podman.socket user service.
  ansible.builtin.shell: systemctl --user start podman.socket

- name: Install Google Cloud public signing key.
  become: true
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb http://packages.cloud.google.com/apt/ kubernetes-xenial main
    state: present

- name: Install kubectl.
  become: true
  ansible.builtin.apt:
    name: kubectl
    state: present

- name: Install minicube.
  become: true
  ansible.builtin.apt:
    deb: https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb

- name: Add VirtualBox key.
  become: true
  ansible.builtin.apt_key:
    url: https://www.virtualbox.org/download/oracle_vbox_2016.asc
    state: present

- name: Add VirtualBox repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian {{ ansible_distribution_release | lower }} contrib
    state: present

- name: Install VirtualBox.
  become: true
  ansible.builtin.apt:
    name:
      - linux-headers-generic
      - linux-headers-5.4.0-77-generic
      - virtualbox-6.1
      - virtualbox-dkms
    update_cache: true
    state: present

- name: Install pipx.
  ansible.builtin.shell: python3 -m pip install --user pipx

- name: Install python packages.
  community.general.pipx:
    name: "{{ item }}"
  loop:
    - ipython
    - docker-compose
    - podman-compose
    - awscli
    - lolcat
    - speedtest-cli
    - cookiecutter
    - pre-commit
  tags: pipx

- name: Inject requests to ipython virtualenv.
  community.general.pipx:
    name: ipython
    state: inject
    inject_packages:
      - requests
  tags: pipx

- name: Download and install ufw-docker.
  become: true
  ansible.builtin.get_url:
    url: https://github.com/chaifeng/ufw-docker/raw/master/ufw-docker
    dest: /usr/local/bin/ufw-docker
    mode: a+x
  tags: ufw

- name: Install ufw-docker rules
  become: true
  ansible.builtin.shell: ufw-docker install
  tags: ufw

- name: Restart ufw.
  become: true
  ansible.builtin.service:
    name: ufw
    state: restarted
  tags: ufw

- name: Import the nodejs role
  ansible.builtin.import_role:
    name: geerlingguy.nodejs
  tags: nodejs
  become: true

- name: nvm
  ansible.builtin.shell: >
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
  tags: nodejs

- name: Install Deno.
  ansible.builtin.shell: curl -fsSL https://deno.land/install.sh | sh
  tags: deno
