- name: Create "Soft" directory.
  ansible.builtin.file:
    path: "{{ software_directory }}"
    state: directory

- name: Set default firewall policy for the localhost.
  become: true
  community.general.ufw:
    state: enabled
    policy: reject
  tags: ufw

- name: Restart ufw.
  become: true
  ansible.builtin.service:
    name: ufw
    state: restarted
  tags: ufw

- name: Run "apt-get update, dist-upgrade and autoremove".
  become: true
  ansible.builtin.apt:
    update_cache: true
    upgrade: dist
    autoremove: true

- name: Install local packages.
  become: true
  ansible.builtin.apt:
    name: "{{ local_packages }}"
    state: present
  tags: local_packages

- name: Remove local packages.
  become: true
  ansible.builtin.apt:
    name: "{{ local_packages_to_remove }}"
    state: absent
  tags: local_packages_remove

# UBUNTU-SPECIFIC
#- name: Install local snap packages.
#  become: true
#  community.general.snap:
#    name: "{{ local_snap_packages }}"
#    classic: true

- name: Set git username for the local CIDE repo.
  community.general.git_config:
    name: user.name
    repo: .
    scope: local
    value: "{{ github_username }}"

- name: Set git email for the local CIDE repo.
  community.general.git_config:
    name: user.email
    repo: .
    scope: local
    value: "{{ github_email }}"

- name: Change remote URL to SSH.
  community.general.git_config:
    name: remote.origin.url
    repo: .
    scope: local
    value: git@github.com:{{ github_username }}/cide.git

- name: Copy SSH config.
  ansible.builtin.copy:
    src: ssh_config
    dest: "{{ home_directory }}/.ssh/config"
  tags: ssh_config

- name: Set up hosts file.
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ item }}"
  with_items: "{{ hosts_entries }}"
  tags: hosts_file

- name: Configure byobu as available shell.
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/shells
    line: /usr/bin/byobu
  tags: terminal

- name: Create autostart directory.
  ansible.builtin.file:
    path: "{{ home_directory }}/.config/autostart"
    state: directory

- name: Copy Guake autostart file.
  ansible.builtin.copy:
    src: guake.desktop
    dest: "{{ home_directory }}/.config/autostart/guake.desktop"
  tags: terminal

- name: Import guake preferences.
  ansible.builtin.shell: guake --restore-preferences roles/localhost/files/guake_preferences
  tags: terminal

- name: Create .byobu directory.
  ansible.builtin.file:
    path: "{{ home_directory }}/.byobu"
    state: directory

- name: Copy tmux config.
  ansible.builtin.copy:
    src: .tmux.conf
    dest: "{{ home_directory }}/.byobu/.tmux.conf"
  tags: terminal

- name: Clone tmux-jump.
  ansible.builtin.git:
    repo: https://github.com/schasse/tmux-jump
    dest: "{{ home_directory }}/.tmux-jump"
  tags: terminal

- name: Copy byobu keybindings config.
  ansible.builtin.copy:
    src: keybindings.tmux
    dest: "{{ home_directory }}/.byobu/keybindings.tmux"
  tags: terminal

# ONLY FOR UBUNTU
#- name: Disable Gnome animations.
#  ansible.builtin.shell: gsettings set org.gnome.desktop.interface enable-animations false

#- name: Disable the Dock.
#  ansible.builtin.shell: gnome-extensions disable ubuntu-dock@ubuntu.com

#- name: Disable desktop icons.
#  ansible.builtin.shell: gnome-extensions disable desktop-icons@csoriano

- name: Disable background.
  ansible.builtin.shell: gsettings set org.gnome.desktop.background picture-options 'none'

- name: Set primary background color to black.
  ansible.builtin.shell: gsettings set org.gnome.desktop.background primary-color '#000000'

- name: Set secondary background color to black.
  ansible.builtin.shell: gsettings set org.gnome.desktop.background secondary-color '#000000'

- name: Remove favourites.
  ansible.builtin.shell: gsettings set org.gnome.shell favorite-apps "['firefox.desktop']"

- name: Disable natural scroll.
  ansible.builtin.shell: gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll false

- name: Disable XFCE battery notifications.
  ansible.builtin.shell: xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/general-notification --set false --create

- name: Clone gruvbox theme.
  ansible.builtin.git:
    repo: https://github.com/TheGreatMcPain/gruvbox-material-gtk.git
    dest: "{{ projects_directory }}/gruvbox-material-gtk"
  tags: theme

- name: Copy gruvbox theme.
  ansible.builtin.copy:
    src: "{{ projects_directory }}/gruvbox-material-gtk/{{ item }}"
    dest: "{{ home_directory }}/.local/share/"
    remote_src: true
  loop:
    - themes
    - icons
  tags: theme

- name: Set GTK theme.
  ansible.builtin.shell: gsettings set org.gnome.desktop.interface gtk-theme "Gruvbox-Material-Dark"
  tags: theme

- name: Set icon theme.
  ansible.builtin.shell: gsettings set org.gnome.desktop.interface icon-theme "Gruvbox-Material-Dark"
  tags: theme

- name: Create "cide" directory.
  ansible.builtin.file:
    path: "{{ software_directory }}/cide"
    state: directory

# TODO: replace with https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html
# once recursive option implemented.
- name: Download CIDE electron app build.
  ansible.builtin.shell: scp -r {{ username }}@cloud:{{ software_directory }}/cide/CIDE-linux-x64 {{ software_directory }}/cide/CIDE-linux-x64

- name: Copy CIDE icon.
  ansible.builtin.copy:
    src: cide.png
    dest: "{{ software_directory }}/cide/CIDE-linux-x64/cide.png"

- name: Copy cide.desktop.
  become: true
  ansible.builtin.template:
    src: cide.desktop
    dest: /usr/share/applications/cide.desktop

- name: Install Signal public signing key.
  become: true
  ansible.builtin.apt_key:
    url: https://updates.signal.org/desktop/apt/keys.asc
    state: present

- name: Add Signal repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main
    state: present

- name: Install Signal.
  become: true
  ansible.builtin.apt:
    name: signal-desktop
    update_cache: true
    state: present

- name: Install Elementpublic signing key.
  become: true
  ansible.builtin.apt_key:
    url: https://packages.element.io/debian/element-io-archive-keyring.gpg
    state: present
  tags: element

- name: Add Element repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb https://packages.element.io/debian/ default main
    state: present
  tags: element

- name: Install Element.
  become: true
  ansible.builtin.apt:
    name: element-desktop
    update_cache: true
    state: present
  tags: element

- name: Install pipx.
  ansible.builtin.shell: python3 -m pip install --user pipx

- name: Install python packages.
  community.general.pipx:
    name: "{{ item }}"
  loop:
    - ipython
    - lolcat
    - black
    - glances[action,browser,cloud,cpuinfo,docker,export,folders,gpu,graph,ip,raid,snmp,web,wifi]
    - speedtest-cli
    - tldr
    - httpie

- name: Inject requests to ipython virtualenv.
  community.general.pipx:
    name: ipython
    state: inject
    inject_packages:
      - requests

- name: Install freetube.
  become: true
  ansible.builtin.apt:
    deb: "{{ freetube_deb_url }}"
  tags: freetube

- name: Install figma-linux.
  become: true
  ansible.builtin.apt:
    deb: "{{ figma_linux_deb_url }}"
  tags: figma

- name: Create "obsidian" directory.
  ansible.builtin.file:
    path: "{{ software_directory }}/obsidian"
    state: directory
  tags: obsidian

- name: Download Obsidian appimage.
  ansible.builtin.get_url:
    url: "{{ obsidian_appimage_url }}"
    dest: "{{ software_directory }}/obsidian/obsidian"
    mode: a+x
  tags: obsidian

- name: Copy obsidian.desktop.
  become: true
  ansible.builtin.template:
    src: obsidian.desktop
    dest: /usr/share/applications/obsidian.desktop
  tags: obsidian

- name: Create "chatgpt" directory.
  ansible.builtin.file:
    path: "{{ software_directory }}/chatgpt"
    state: directory
  tags: chatgpt

- name: Download ChatGPT appimage.
  ansible.builtin.get_url:
    url: "{{ chatgpt_appimage_url }}"
    dest: "{{ software_directory }}/chatgpt/chatgpt"
    mode: a+x
  tags: chatgpt

- name: Copy chatgpt.desktop.
  become: true
  ansible.builtin.template:
    src: chatgpt.desktop
    dest: /usr/share/applications/chatgpt.desktop
  tags: chatgpt

- name: Install Mullvad.
  become: true
  ansible.builtin.apt:
    deb: "{{ mullvad_deb_url }}"
  tags: mullvad

- name: Add Spotify repository key.
  become: true
  ansible.builtin.apt_key:
    url: https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg
    state: present
  tags: spotify

- name: Add Spotify repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb http://repository.spotify.com stable non-free
    state: present
  tags: spotify

- name: Install Spotify.
  become: true
  ansible.builtin.apt:
    name: spotify-client
    update_cache: true
    state: present
  tags: spotify

- name: Add LibreWolf repository key.
  become: true
  ansible.builtin.apt_key:
    url: https://deb.librewolf.net/keyring.gpg
    state: present
  tags: librewolf

- name: Add LibreWolf repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] http://deb.librewolf.net focal main
    state: present
  tags: librewolf

- name: Install LibreWolf.
  become: true
  ansible.builtin.apt:
    name: librewolf
    update_cache: true
    state: present
  tags: librewolf

- name: Add Brave repository key.
  become: true
  ansible.builtin.apt_key:
    url: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
    state: present
  tags: brave

- name: Add Brave repo.
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main
    state: present
  tags: brave

- name: Install Brave.
  become: true
  ansible.builtin.apt:
    name: brave-browser
    update_cache: true
    state: present
  tags: brave

- name: Download and extract Monero.
  become: true
  ansible.builtin.unarchive:
    src: "https://downloads.getmonero.org/cli/linux64"
    dest: "{{ software_directory }}"
    remote_src: true
  tags: monero

- name: Clone tdrop
  ansible.builtin.git:
    repo: https://github.com/noctuid/tdrop.git
    dest: "{{ software_directory }}/tdrop"
  tags: tdrop

- name: Install tdrop.
  become: true
  ansible.builtin.shell: make install
  args:
    chdir: "{{ software_directory }}/tdrop"
  tags: tdrop

- name: Copy tdrop file to the software directory.
  become: true
  ansible.builtin.copy:
    src: tdrop
    dest: "{{ software_directory }}/tdrop/tdrop_wrapper"
    mode: a+x
  tags: tdrop
